{"version":3,"file":"static/js/28.875d8898.chunk.js","mappings":"2OACA,GAAgB,KAAO,oB,SCgDvB,EA5Ca,WACX,IAAAA,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACtBI,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAADC,OALFC,yNAsBf,OAbAC,EAAAA,EAAAA,YAAU,WACmB,SAAAC,IAQ1B,OAR0BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA3B,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQC,MAAM,sCAADV,OAC6BP,EAAO,2BAC7CE,GAECgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAC,GAAQ,OAAIpB,EAAaoB,EAASE,KAAK,IAC5CC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAM,IAAE,KAAD,mBAAAT,EAAAY,OAAA,GAAAb,EAAA,MACtCc,MAAA,KAAAC,UAAA,EATc,WACYlB,EAAAiB,MAAC,KAADC,UAAA,CAS3BC,EACF,GAAG,KAGDC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,KAASH,SACtBjC,EAAUqC,KAAI,SAAAC,GAAK,OAClBN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEC,UAAWC,EAAAA,SACXG,IAAG,kCAAA9B,OAAoC6B,EAAME,cAC7CC,IAAI,iBAENP,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAMI,QACXR,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAMK,cCvBT,WAGX,IAH0B,IAAdC,EAAId,UAAAe,OAAA,QAAAC,IAAAhB,UAAA,GAAAA,UAAA,GAAG,GACfiB,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KAAQ,CACb,IAAIQ,EAAqB,GAAdJ,EAAMJ,GAEfG,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAEV,CACA,OAAOL,CACT,CDAmBQ,GAQJ,QAKf,C,sBEhDA,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOxC,GAEP,YADAkC,EAAOlC,EAET,CAEIuC,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAO7C,KAAKwC,EAAOC,EAEvC,CAEe,SAAShD,EAAkBuD,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOzC,UACX,OAAO,IAAIqC,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMW,EAAGvC,MAAMwC,EAAME,GAEzB,SAASX,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOW,GACdhB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASW,EACnE,CAEAZ,OAAMd,EACR,GACF,CACF,C","sources":["webpack://react-homework-template/./src/components/pages/Cast/Cast.module.css?f38e","components/pages/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__cz-3T\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Cast.module.css';\nimport { nanoid } from 'nanoid';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization: `Bearer ${apiKey}`,\n    },\n  };\n\n  useEffect(() => {\n    async function fetchCredits() {\n      await fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n        options\n      )\n        .then(response => response.json())\n        .then(response => setMovieCast(response.cast))\n        .catch(error => console.log(error));\n    }\n    fetchCredits();\n  }, []);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <div className={css.cast}>\n        {movieCast.map(actor => (\n          <li key={nanoid()}>\n            <img\n              className={css.portrait}\n              src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n              alt=\"NO PORTRAIT\"\n            ></img>\n            <h4>{actor.name}</h4>\n            <p>{actor.character}</p>\n          </li>\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Cast;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","movieId","useParams","options","method","headers","accept","Authorization","concat","process","useEffect","_fetchCredits","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","fetch","then","response","json","cast","catch","error","console","log","stop","apply","arguments","fetchCredits","_jsxs","children","_jsx","className","css","map","actor","src","profile_path","alt","name","character","size","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","fn","self","this","args","err"],"sourceRoot":""}